import telebot
import sqlite3
from flask import Flask
from threading import Thread
from groq import Groq
import os
from datetime import datetime, timedelta

# === CONFIG ===
TELEGRAM_TOKEN = os.getenv("7241781324:AAFOgQ8QgTiCOC1efBUoPeu7UzM7Yu2UXvo")
GROQ_API_KEY = os.getenv("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")
ADMIN_ID = int(os.getenv("1023932092"))
MIR_CARD = os.getenv("2200701901154812")
CRYPTO_ADDRESS = os.getenv("TH92J3hUqbAgpXiC5NtkxFHGe2vB9yUonH")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = Groq(api_key=GROQ_API_KEY)

# === Flask uptime ===
app = Flask(__name__)
@app.route('/')
def home():
    return "Bot is running!"
Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()

# === Database ===
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    access_until TEXT
)
""")
conn.commit()

# === /start ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞", "üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
    bot.send_message(message.chat.id,
        "<b>ü§ñ Albetting ‚Äî –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π</b>\n\n"
        "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        "‚Ä¢ –†–∞–∑–æ–≤—ã–π: 5‚ÇΩ\n"
        "‚Ä¢ 7 –¥–Ω–µ–π: 25‚ÇΩ\n"
        "‚Ä¢ 30 –¥–Ω–µ–π: 65‚ÇΩ\n"
        "‚Ä¢ –ì–æ–¥–æ–≤–æ–π: 390‚ÇΩ",
        parse_mode="HTML",
        reply_markup=markup
    )

# === Donate Info ===
@bot.message_handler(func=lambda msg: msg.text == "üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def donate_info(msg):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid"))
    bot.send_message(msg.chat.id,
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º:\n\n"
        f"üí≥ MIR: <code>{MIR_CARD}</code>\n"
        f"ü™ô USDT (TRC20): <code>{CRYPTO_ADDRESS}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=markup
    )

# === User clicked "Paid" ===
@bot.callback_query_handler(func=lambda call: call.data == "paid")
def confirm_payment(call):
    uid = call.message.chat.id
    bot.send_message(uid, "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    bot.send_message(ADMIN_ID,
        f"üßæ –ó–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã –æ—Ç @{call.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} ({uid})",
        reply_markup=telebot.types.InlineKeyboardMarkup([
            [telebot.types.InlineKeyboardButton("–†–∞–∑–æ–≤—ã–π", callback_data=f"access_{uid}_1")],
            [telebot.types.InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f"access_{uid}_7")],
            [telebot.types.InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f"access_{uid}_30")],
            [telebot.types.InlineKeyboardButton("1 –≥–æ–¥", callback_data=f"access_{uid}_365")],
            [telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_{uid}")]
        ])
    )

# === Admin confirms ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("access_") or call.data.startswith("deny_"))
def handle_access(call):
    if call.from_user.id != ADMIN_ID:
        return

    data = call.data.split("_")
    uid = int(data[1])

    if call.data.startswith("deny_"):
        bot.send_message(uid, "‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        bot.send_message(call.message.chat.id, "–û—Ç–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        return

    days = int(data[2])
    access_until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")
    cursor.execute("INSERT OR REPLACE INTO users (user_id, access_until) VALUES (?, ?)", (uid, access_until))
    conn.commit()

    bot.send_message(uid, f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –¥–æ {access_until}")
    bot.send_message(call.message.chat.id, f"–í—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –¥–æ {access_until}")

# === Match Input ===
@bot.message_handler(func=lambda msg: msg.text == "üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞")
def prompt_analysis(msg):
    cursor.execute("SELECT access_until FROM users WHERE user_id=?", (msg.chat.id,))
    result = cursor.fetchone()

    if not result or datetime.now() > datetime.strptime(result[0], "%Y-%m-%d"):
        bot.send_message(msg.chat.id, "‚õî –î–æ—Å—Ç—É–ø –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å—Ç—ë–∫. –ù–∞–∂–º–∏—Ç–µ üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
        return

    bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–µ–∞–ª - –ê—Ä—Å–µ–Ω–∞–ª, –ø–µ—Ä–≤—ã–π –º–∞—Ç—á 0:3):")

# === Match Analyzer ===
@bot.message_handler(func=lambda msg: True)
def analyze(msg):
    cursor.execute("SELECT access_until FROM users WHERE user_id=?", (msg.chat.id,))
    result = cursor.fetchone()

    if not result or datetime.now() > datetime.strptime(result[0], "%Y-%m-%d"):
        return

    bot.send_message(msg.chat.id, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ç–≤–µ—Ç –¥–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É:

–ú–∞—Ç—á: [–ù–∞–∑–≤–∞–Ω–∏–µ]
–°—Ç–∞–¥–∏—è: [1/8 —Ñ–∏–Ω–∞–ª–∞ –∏ —Ç.–¥.]
–ú–µ—Å—Ç–æ: [–≥–æ—Ä–æ–¥, —Å—Ç–∞–¥–∏–æ–Ω]

‚Äî

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
‚Ä¢ [—Ñ–∞–∫—Ç 1]
‚Ä¢ [—Ñ–∞–∫—Ç 2]
‚Ä¢ [—Ñ–∞–∫—Ç 3]

‚Äî

–ü—Ä–æ–≥–Ω–æ–∑:
‚Ä¢ –°—Ç–∞–≤–∫–∞: [–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–±–µ–¥–∞ –†–µ–∞–ª–∞]
‚Ä¢ –°—á—ë—Ç: [–Ω–∞–ø—Ä–∏–º–µ—Ä, 2:1]
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: [–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è]

‚Äî

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 3+):
‚Ä¢ [—Å—Ç–∞–≤–∫–∞ 1]
‚Ä¢ [—Å—Ç–∞–≤–∫–∞ 2]
‚Ä¢ [—Å—Ç–∞–≤–∫–∞ 3]

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á: {msg.text}
"""

    try:
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message.content
        for chunk in range(0, len(answer), 4000):
            bot.send_message(msg.chat.id, answer[chunk:chunk+4000])
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞:\n{e}")

bot.polling()
