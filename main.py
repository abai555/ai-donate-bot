import os
import telebot
import sqlite3
from flask import Flask
from threading import Thread
from groq import Groq

# === CONFIG ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
MIR_CARD = os.getenv("MIR_CARD")
CRYPTO_ADDRESS = os.getenv("CRYPTO_ADDRESS")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = Groq(api_key=GROQ_API_KEY)

# === Flask Uptime ===
app = Flask(__name__)
@app.route('/')
def home():
    return "Bot is running!"
Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()

# === Database ===
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    access INTEGER DEFAULT 0
)
""")
conn.commit()

# === /start Command ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üîç Analyze Match", "üí≥ Donate & Get Access")
    bot.send_message(message.chat.id,
        "<b>ü§ñ AI Match Analyzer</b>\n\n"
        "Analyze football matches using AI.\n\n"
        "<b>Payment Plans:</b>\n"
        "‚Ä¢ One-time: $5\n"
        "‚Ä¢ Weekly: $25\n"
        "‚Ä¢ Monthly: $65\n"
        "‚Ä¢ Yearly: $390",
        parse_mode="HTML",
        reply_markup=markup
    )

# === Payment Info ===
@bot.message_handler(func=lambda msg: msg.text == "üí≥ Donate & Get Access")
def donate_info(msg):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ I Paid", callback_data="paid"))
    bot.send_message(msg.chat.id,
        f"Send payment to:\n\n"
        f"üí≥ MIR Card: <code>{MIR_CARD}</code>\n"
        f"ü™ô USDT TRC20: <code>{CRYPTO_ADDRESS}</code>\n\n"
        "After payment, press the button below:",
        parse_mode="HTML",
        reply_markup=markup
    )

# === Confirm Payment ===
@bot.callback_query_handler(func=lambda call: call.data == "paid")
def confirm_payment(call):
    uid = call.message.chat.id
    bot.send_message(uid, "Your payment request has been sent. Wait for manual approval.")
    bot.send_message(ADMIN_ID,
        f"üßæ Payment request from user @{call.from_user.username or 'NoUsername'} ({uid})",
        reply_markup=telebot.types.InlineKeyboardMarkup([
            [telebot.types.InlineKeyboardButton("‚úÖ Grant", callback_data=f"grant_{uid}"),
             telebot.types.InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_{uid}")]
        ])
    )

# === Admin Approval ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("grant_") or call.data.startswith("reject_"))
def handle_admin_action(call):
    uid = int(call.data.split("_")[1])
    if call.from_user.id != ADMIN_ID:
        return
    if call.data.startswith("grant_"):
        cursor.execute("INSERT OR REPLACE INTO users (user_id, access) VALUES (?, 1)", (uid,))
        conn.commit()
        bot.send_message(uid, "‚úÖ Access granted!")
        bot.send_message(call.message.chat.id, "Access approved.")
    else:
        bot.send_message(uid, "‚ùå Access denied.")
        bot.send_message(call.message.chat.id, "Access rejected.")

# === Analyze Match Button ===
@bot.message_handler(func=lambda msg: msg.text == "üîç Analyze Match")
def match_entry(msg):
    cursor.execute("SELECT access FROM users WHERE user_id=?", (msg.chat.id,))
    access = cursor.fetchone()
    if access and access[0] == 1:
        bot.send_message(msg.chat.id, "Send match info (e.g. Arsenal vs Real Madrid, context, etc):")
    else:
        bot.send_message(msg.chat.id, "‚ùå Access denied. Use üí≥ Donate & Get Access first.")

# === Match Analysis ===
@bot.message_handler(func=lambda msg: True)
def analyze(msg):
    cursor.execute("SELECT access FROM users WHERE user_id=?", (msg.chat.id,))
    access = cursor.fetchone()
    if not access or access[0] != 1:
        return
    bot.send_message(msg.chat.id, "‚ö° Analyzing...")
    try:
        prompt = f"""
prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –õ–∏–≥–µ —á–µ–º–ø–∏–æ–Ω–æ–≤. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

Match: –õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ ‚Äî [–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ –ø—Ä–æ—Ç–∏–≤ –ê—Ä—Å–µ–Ω–∞–ª–∞].  
–û—Ç–≤–µ—Ç–Ω—ã–π –º–∞—Ç—á, –ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å [—Å—á–µ—Ç –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã].  
–ú–∞—Ç—á –ø—Ä–æ–π–¥–µ—Ç –Ω–∞ [—Å—Ç–∞–¥–∏–æ–Ω, –≥–æ—Ä–æ–¥].

–ü—Ä–æ–≥–Ω–æ–∑:

‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: [–ø—Ä–∏–º–µ—Ä: ¬´–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥¬ª –≤—ã–∏–≥—Ä–∞–µ—Ç]

‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: [–ø—Ä–∏–º–µ—Ä: –í—ã—Å–æ–∫–∞—è]

‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –°—Ç–∞–≤–∫–∞: [–ø—Ä–∏–º–µ—Ä: –í—Å–µ–≥–æ –ë–æ–ª–µ–µ 2,5]

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ: {msg.text}
"""
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message.content
        for chunk in range(0, len(answer), 4000):
            bot.send_message(msg.chat.id, answer[chunk:chunk+4000])
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞:\n{e}")

bot.polling()
